<!DOCTYPE html>
<html lang="en">
<head>
  <script type="importmap">
    {
      "imports": {
        "solid-js": "https://esm.sh/solid-js@1.9.7",
        "solid-js/web": "https://esm.sh/solid-js@1.9.7/web"
      }
    }
  </script>
  <meta charset="UTF-8">
  <title>solid-suggest - SolidJS Search Suggestions Dropdown</title>
  <meta name="description" content="Headless search suggestions dropdown component for Solid.js">
  <meta name="author" content="Antriksh Yadav">
  <meta name="theme-color" content="#333">
  <link rel="stylesheet" href="./styles.css"/>
  <!-- highlight.js for syntax highlighting -->
  <link rel="stylesheet" href="https://unpkg.com/@highlightjs/cdn-assets@11.11.1/styles/foundation.min.css">
  <script src="https://unpkg.com/@highlightjs/cdn-assets@11.11.1/highlight.min.js"></script>
  <script>hljs.highlightAll();</script>
  <script>  // Just a fun little color thing
    const setAccent = colorHex => {
      document.documentElement.style.setProperty("--accent", colorHex);
    };
    const setThemeColor = colorHex => {
      document.querySelector('meta[name="theme-color"]').setAttribute("content", colorHex);
    };

    const colorRotation = ["#20063B", "#a100f2", "#A34400", "#b61390", "#2274A5"];
    const prefersReducedMotion = window.matchMedia("(prefers-reduced-motion: reduce)").matches;

    if (prefersReducedMotion) {
      const colorHex = colorRotation[Math.floor(Math.random() * colorRotation.length)];
      setAccent(colorHex);
      setThemeColor(colorHex);
    } else {
      const shuffledColors = colorRotation
        .map(value => ({ value, sort: Math.random() }))
        .sort((a, b) => a.sort - b.sort)
        .map(({ value }) => value);
      shuffledColors.forEach((colorHex, i) => {
        setTimeout(() => {
          setAccent(colorHex);
          setThemeColor(colorHex);
        }, 500 * i);
      });
    }
  </script>
</head>
<body>
  <h1 class="logo">solid-suggest</h1>
  <strong>Maintained by <a href="https://antrikshy.com">Antriksh Yadav</a>. Contribute <a href="https://github.com/Antrikshy/solid-suggest">on GitHub</a>.</strong>
  <main>
    <div class="doc-description">
      <h2>Very basic usage</h2>
      <big>Plain text suggestions, no styling</big>
    </div>
    <section class="doc-example">
      <pre class="doc-code-area">
        <code class="language-javascript">
import Suggest from "solid-suggest";

const items = ["Apple", "Banana", "Cherry", "Date", "Elderberry", "Fig", "Grape", "Honeydew", "Kiwi", "Lemon"];

function Example() {
  const [selected, setSelected] = createSignal("none");
  return (
    &lt;>
      &lt;p>Selected: {selected()}&lt;/p>
      &lt;Suggest
        renderSuggestion={item => item}
        onQuery={query =>
          items.filter(item =>
            item.toLowerCase().includes(query.toLowerCase())
          )
        }
        onSelect={setSelected}
      />
    &lt;/>
  )
}
      </code>
    </pre>
    <div class="doc-demo-area" id="example1"></div>
    </section>
    <div class="doc-description">
      <h2>Realistic usage</h2>
      <big>Objects as suggestions, with styling</big>
    </div>
    <section class="doc-example">
      <pre class="doc-code-area">
        <strong>JSX</strong>
        <code class="language-javascript">
import Suggest from "solid-suggest";

const items = [
  { name: "Eiffel Tower", kind: "Monument", rating: 5 },
  { name: "Great Wall of China", kind: "Historical Site", rating: 5 },
  { name: "Statue of Liberty", kind: "Monument", rating: 3 },
  // ...more items...
];

function renderSearchItem(item) {
  return
  `${item.name} - ${item.kind} (${Array(item.rating).fill("â˜…").join("")})`;
}

function Example() {
  const [selected, setSelected] = createSignal("none");
  return (
    &lt;>
      &lt;p>Selected: {selected()}&lt;/p>
      &lt;Suggest
        renderSuggestion={renderSearchItem}
        onQuery={query =>
          items.filter(
            item =>
              item.name.toLowerCase().includes(query.toLowerCase()) ||
              item.kind.toLowerCase().includes(query.toLowerCase())
          )
        }
        onSelect={item => setSelected(item.name)}
      />
    &lt;/>
  );
}
        </code>
        <strong>CSS</strong>
        <code class="language-css">
.s-sug-container {
  width: 25em;
  position: relative;

  input {
    width: 100%;
  }

  ul {
    display: flex;
    flex-direction: column;
    max-height: 20em;
    width: 100%;
    margin: 0.25em 0 0;
    padding: 0.25em 0 0 0;
    position: absolute;
    top: 1lh;
    left: 0;
    list-style: none;
    box-shadow: lightgray 0 0.25em 0.5em;
    background-color: #fff;
    border-radius: 5px;
    overflow-y: scroll;

    li {
      padding: 0.25em;

      &[data-staged="true"] {
        background-color: var(--accent);
      }
    }
  }
}
        </code></pre>
      <div class="doc-demo-area" id="example2"></div>
    </section>
    <div class="doc-description">
      <h2>Upside-down suggestions, debounce</h2>
      <big>Arrow keys reversed, CSS to reverse UI elements, 500ms debounce</big>
    </div>
    <section class="doc-example">
      <pre class="doc-code-area">
        <strong>JSX</strong>
        <code class="language-javascript">
// Same as above, but with these changes

&lt;Suggest
  // ...
  reverseKeyInput={true}
  debounceMs={500} // Debounce input by 500ms
/>
        </code>
        <strong>CSS</strong>
        <code class="language-css">
/* Same as above, but with these changes */

.s-sug-container {
  display: flex;
  flex-direction: column-reverse;

  ul {
    flex-direction: column-reverse;
    margin: 0 0 0.25em;
    bottom: 1lh;  /* top not set */
    left: 0;
  }
}

/* Plus, styles on the container to intentionally leave room */
        </code></pre>
      <div class="doc-demo-area" id="example3"></div>
    </section>
    <section class="doc-tips">
      <div class="doc-description">
        <h2>General tips</h2>
      </div>
      <p><strong>Q. How do I supply suggestions to solid-suggest?</strong></p>
      <p>Using <code>onQuery</code>. solid-suggest relies on your application to track what suggestions should render at any time. <code>onQuery</code> is invoked at initial render and every time the user's query updates.</p>
      <p><strong>Q. Does solid-suggest come with <em>any</em> styling?</strong></p>
      <p>No. This is a completely headless library that gives you the bones of a suggestions dropdown. This includes semantic DOM elements, handling of mouse and keyboard input, and SolidJS reactivity. All styling is provided by the developer-user of solid-suggest.</p>
      <p><strong>Q. Any styling recommendations?</strong></p>
      <p>
        Yes. At minimum, developers will likely want to:
        <ol>
          <li>Set <code>list-style: none</code> on the suggestions <code>ul</code>, and remove any default padding.</li>
          <li><code>position: relative</code> on the top level container, and <code>position: absolute</code> on the suggestions <code>ul</code>, along with <code>top</code>, <code>bottom</code> etc. positioning styles to fit your needs. This will allow the dropdown to overlap neighboring elements.</li>
        </ol>
        Everything else is really up to you. You can see some other recommendations above. Feel free to use them as they are, or customize to fit your branding.
      </p>
      <p><strong>Q. How can I hide the dropdown until user input?</strong></p>
      <p>Supply solid-suggest with an <code>onQuery</code> that returns an empty array when the user's query is blank, like the following examples. Note how this leaves room for a lot of custom behavior.</p>
      <pre><code class="language-javascript">
const onQuery = query => query ? /* compute suggestions */ : [];

return (
  ...
  &lt;Suggest ... onQuery={onQuery} ... />
  ...
);
      </code></pre>
      <pre><code class="language-javascript">
function onQuery(query) {
  if (!query) return [];
  /* else, compute and return suggestions */
}

return (
  ...
  &lt;Suggest ... onQuery={onQuery} ... />
  ...
);
      </code></pre>
      <p><strong>Q. Can I fetch search suggestions from network calls?</strong></p>
      <p>Sure! solid-suggest doesn't provide network fetch as a built-in feature, but you can do whatever you want in your <code>onQuery</code> implementation. Consider supplying a <code>debounceMs</code> prop to delay <code>onQuery</code> triggers after user input, reducing network calls.</p>
    </section>
  </main>

  <!-- Example 1 -->
  <script type="module">
    import { render } from "solid-js/web";
    import { createSignal, createEffect } from "solid-js";
    import Suggest from "../dist/index.js";

    const items1 = ["Apple", "Banana", "Cherry", "Date", "Elderberry", "Fig", "Grape", "Honeydew", "Kiwi", "Lemon"];
    function Example() {
      const [selected, setSelected] = createSignal("none");
      createEffect(() => {
        const outputEl = document.getElementById("output1");
        outputEl.innerHTML = `Selected: ${selected()}`;
      });
      return [
        Object.assign(document.createElement("p"), {
          innerHTML: `Selected: ${selected()}`,
          id: "output1"
        }),
        Suggest({
          renderSuggestion: item => item,
          onQuery: query => items1.filter(item => item.toLowerCase().includes(query.toLowerCase())),
          onSelect: setSelected
        }),
        Object.assign(document.createElement("p"), {
          innerHTML: "Demo element after unstyled solid-suggest."
        }),
      ];
    }

    render(Example, document.getElementById("example1"));
  </script>

  <!-- Example 2 -->
  <script type="module">
    import { render } from "solid-js/web";
    import { createSignal, createEffect } from "solid-js";
    import Suggest from "../dist/index.js";

    const items2 = [
      { name: "Eiffel Tower", kind: "Monument", rating: 5 },
      { name: "Great Wall of China", kind: "Historical Site", rating: 5 },
      { name: "Statue of Liberty", kind: "Monument", rating: 3 },
      { name: "Machu Picchu", kind: "Ancient City", rating: 4 },
      { name: "Sydney Opera House", kind: "Building", rating: 3 },
      { name: "Mount Everest", kind: "Mountain", rating: 2 },
      { name: "Colosseum", kind: "Amphitheatre", rating: 5 },
      { name: "Taj Mahal", kind: "Mausoleum", rating: 5 },
      { name: "Big Ben", kind: "Clock Tower", rating: 4 },
      { name: "Leaning Tower of Pisa", kind: "Tower", rating: 4 },
      { name: "Christ the Redeemer", kind: "Statue", rating: 3 },
      { name: "Sphinx of Giza", kind: "Statue", rating: 4 },
      { name: "Stonehenge", kind: "Prehistoric Monument", rating: 1 },
      { name: "Golden Gate Bridge", kind: "Bridge", rating: 3 },
      { name: "Brandenburg Gate", kind: "Gate", rating: 2 },
      { name: "Burj Khalifa", kind: "Skyscraper", rating: 4 },
      { name: "Angkor Wat", kind: "Temple", rating: 3 },
      { name: "Mount Rushmore", kind: "Monument", rating: 4 },
      { name: "Arc de Triomphe", kind: "Arch", rating: 4 },
      { name: "Tower of London", kind: "Castle", rating: 2 }
    ];

    function renderSearchItem(item) {
      return `${item.name} - ${item.kind} (${Array(item.rating).fill("â˜…").join("")})`;
    }

    function Example() {
      const [selected, setSelected] = createSignal("none");
      createEffect(() => {
        const outputEl = document.getElementById("output2");
        outputEl.innerHTML = `Selected: ${selected()}`;
      });
      return [
        Object.assign(document.createElement("p"), {
          innerHTML: `Selected: ${selected()}`,
          id: "output2"
        }),
        Suggest({
          renderSuggestion: renderSearchItem,
          onQuery: query => items2.filter(
            item => (
              item.name.toLowerCase().includes(query.toLowerCase()) ||
              item.kind.toLowerCase().includes(query.toLowerCase())
            )
          ),
          onSelect: item => setSelected(item.name)
        })
      ];
    }

    render(Example, document.getElementById("example2"));
  </script>

  <!-- Example 3 -->
  <script type="module">
    import { render } from "solid-js/web";
    import { createSignal, createEffect } from "solid-js";
    import Suggest from "../dist/index.js";

    const items3 = [
      { name: "Tracer", role: "Damage" },
      { name: "Reinhardt", role: "Tank" },
      { name: "Mercy", role: "Support" },
      { name: "Genji", role: "Damage" },
      { name: "Winston", role: "Tank" },
      { name: "Ana", role: "Support" },
      { name: "Hanzo", role: "Damage" },
      { name: "D.Va", role: "Tank" },
      { name: "Lucio", role: "Support" },
      { name: "Soldier: 76", role: "Damage" },
      { name: "Sigma", role: "Tank" },
      { name: "Moira", role: "Support" },
      { name: "Reaper", role: "Damage" },
      { name: "Zarya", role: "Tank" },
      { name: "Baptiste", role: "Support" }
    ];

    function renderSearchItem(item) {
      return `${item.name} (${item.role})`;
    }

    function Example() {
      const [selected, setSelected] = createSignal("none");
      createEffect(() => {
        const outputEl = document.getElementById("output3");
        outputEl.innerHTML = `Selected: ${selected()}`;
      });
      return [
        Object.assign(document.createElement("p"), {
          innerHTML: `Selected: ${selected()}`,
          id: "output3"
        }),
        Suggest({
          renderSuggestion: renderSearchItem,
          onQuery: query => items3.filter(
            item => (
              item.name.toLowerCase().includes(query.toLowerCase()) ||
              item.role.toLowerCase().includes(query.toLowerCase())
            )
          ),
          onSelect: item => setSelected(item.name),
          reverseKeyInput: true,
          debounceMs: 500 // Debounce input by 500ms
        })
      ];
    }

    render(Example, document.getElementById("example3"));
  </script>
</body>
</html>
